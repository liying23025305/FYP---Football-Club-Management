<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Tickets Management - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  
    <link rel="stylesheet" href="/stylesheet/style.css" />
    <style>
        .stats-card {
            transition: transform 0.2s;
            border: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .stats-card:hover {
            transform: translateY(-2px);
        }
        .revenue-highlight {
            font-size: 1.5rem;
            font-weight: bold;
            color: #28a745;
        }
        .filter-active {
            background-color: #0d6efd !important;
            color: white !important;
        }
        .countdown-timer {
            font-size: 0.9rem;
        }
        .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .ticket-status {
            font-size: 0.8rem;
        }
        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
        }
        .expired-reservation {
            background-color: #fff3cd;
        }
        .confirmed-ticket {
            background-color: #d1edff;
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar') %>
    <div class="container my-5">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1>
                    <i class="fas fa-ticket-alt me-2"></i>Event Tickets Management
                </h1>
                <p class="text-muted mb-0" id="eventTitle">Loading event details...</p>
            </div>
            <div>
                <button class="btn btn-outline-success me-2" onclick="refreshData()">
                    <i class="fas fa-sync-alt me-2"></i>Refresh Data
                </button>
                <a href="/admin/events" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Events
                </a>
            </div>
        </div>
        
        <!-- Alerts -->
        <div class="alert alert-success alert-dismissible fade show d-none" role="alert" id="successAlert">
            <span id="successMessage"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        
        <div class="alert alert-danger alert-dismissible fade show d-none" role="alert" id="errorAlert">
            <span id="errorMessage"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
        
        <!-- Event Stats -->
        <div class="row mb-4" id="statsContainer">
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Total Capacity</h6>
                                <h3 class="mb-0" id="totalCapacity">0</h3>
                            </div>
                            <div class="text-primary">
                                <i class="fas fa-users fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Confirmed Tickets</h6>
                                <h3 class="mb-0 text-success" id="confirmedTickets">0</h3>
                            </div>
                            <div class="text-success">
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Reserved Tickets</h6>
                                <h3 class="mb-0 text-warning" id="reservedTickets">0</h3>
                            </div>
                            <div class="text-warning">
                                <i class="fas fa-clock fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Total Revenue</h6>
                                <div class="revenue-highlight" id="totalRevenue">$0.00</div>
                            </div>
                            <div class="text-success">
                                <i class="fas fa-dollar-sign fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Additional Stats Row -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Available Tickets</h6>
                                <h3 class="mb-0 text-info" id="availableTickets">0</h3>
                            </div>
                            <div class="text-info">
                                <i class="fas fa-tickets fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Cancelled Tickets</h6>
                                <h3 class="mb-0 text-danger" id="cancelledTickets">0</h3>
                            </div>
                            <div class="text-danger">
                                <i class="fas fa-ban fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Total Purchases</h6>
                                <h3 class="mb-0" id="totalPurchases">0</h3>
                            </div>
                            <div class="text-primary">
                                <i class="fas fa-shopping-cart fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stats-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Avg. Order Value</h6>
                                <h3 class="mb-0 text-success" id="avgOrderValue">$0.00</h3>
                            </div>
                            <div class="text-success">
                                <i class="fas fa-chart-line fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Tickets Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Ticket Purchases</h5>
                <div class="d-flex gap-2">
                    <div class="btn-group">
                        <button class="btn btn-sm btn-outline-primary filter-btn filter-active" onclick="filterTickets('all')">All</button>
                        <button class="btn btn-sm btn-outline-success filter-btn" onclick="filterTickets('confirmed')">Confirmed</button>
                        <button class="btn btn-sm btn-outline-warning filter-btn" onclick="filterTickets('reserved')">Reserved</button>
                        <button class="btn btn-sm btn-outline-danger filter-btn" onclick="filterTickets('cancelled')">Cancelled</button>
                    </div>
                    <button class="btn btn-sm btn-outline-info" onclick="exportTickets()">
                        <i class="fas fa-download me-1"></i>Export
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped" id="ticketsTable">
                        <thead>
                            <tr>
                                <th>Purchase ID</th>
                                <th>Customer</th>
                                <th>Email</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th>Total Price</th>
                                <th>Final Price</th>
                                <th>Status</th>
                                <th>Purchase Date</th>
                                <th>Expires At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="ticketsTableBody">
                            <tr>
                                <td colspan="11" class="text-center py-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2 text-muted">Loading ticket data...</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Ticket Details Modal -->
    <div class="modal fade" id="ticketDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-ticket-alt me-2"></i>Ticket Details
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Purchase Information</h6>
                            <table class="table table-borderless table-sm">
                                <tr>
                                    <td><strong>Purchase ID:</strong></td>
                                    <td id="detailPurchaseId">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Confirmation Code:</strong></td>
                                    <td id="detailConfirmationCode">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td id="detailStatus">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Quantity:</strong></td>
                                    <td id="detailQuantity">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Unit Price:</strong></td>
                                    <td id="detailUnitPrice">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Total Price:</strong></td>
                                    <td id="detailTotalPrice">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Discount Applied:</strong></td>
                                    <td id="detailDiscountApplied">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Final Price:</strong></td>
                                    <td id="detailFinalPrice">-</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>Customer Information</h6>
                            <table class="table table-borderless table-sm">
                                <tr>
                                    <td><strong>Name:</strong></td>
                                    <td id="detailCustomerName">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Email:</strong></td>
                                    <td id="detailCustomerEmail">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Username:</strong></td>
                                    <td id="detailUsername">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td id="detailPhone">-</td>
                                </tr>
                            </table>
                            
                            <h6 class="mt-4">Timing Information</h6>
                            <table class="table table-borderless table-sm">
                                <tr>
                                    <td><strong>Purchase Date:</strong></td>
                                    <td id="detailPurchaseDate">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Expires At:</strong></td>
                                    <td id="detailExpiresAt">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Payment Status:</strong></td>
                                    <td id="detailPaymentStatus">-</td>
                                </tr>
                                <tr>
                                    <td><strong>Transaction Ref:</strong></td>
                                    <td id="detailTransactionRef">-</td>
                                </tr>
                            </table>
                            
                            <div id="notesSection" class="mt-3" style="display: none;">
                                <h6>Notes</h6>
                                <div class="alert alert-info" id="detailNotes"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="modalCancelBtn" onclick="cancelTicketFromModal()">
                        <i class="fas fa-ban me-2"></i>Cancel Ticket
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Cancel Ticket Modal -->
    <div class="modal fade" id="cancelTicketModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-ban me-2"></i>Cancel Ticket
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <form id="cancelTicketForm">
                    <div class="modal-body">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Are you sure you want to cancel this ticket? This action cannot be undone and will process a refund if payment was completed.
                        </div>
                        <div class="mb-3">
                            <label for="cancelReason" class="form-label">Reason for cancellation:</label>
                            <textarea class="form-control" id="cancelReason" name="reason" rows="3" 
                                placeholder="Enter reason for cancellation (optional)"></textarea>
                        </div>
                        <input type="hidden" id="cancelPurchaseId" name="purchaseId">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">
                            <i class="fas fa-ban me-2"></i>Confirm Cancellation
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <%- include('../partials/footer') %>
   
    <script>
        let currentFilter = 'all';
        let currentTicketId = null;
        let eventData = {};
        let ticketsData = [];
        let statsData = {};

        // Get event ID from URL
        const eventId = window.location.pathname.split('/')[3];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadEventData();
            checkUrlParams();
        });
     let data;
     async function loadEventData() {
    try {
        console.log('Loading event data for event ID:', eventId);
        const response = await fetch(`/api/admin/events/${eventId}/tickets-data`);
        
        // Check if the response is ok
        if (!response.ok) {
            console.error('Response not ok:', response.status, response.statusText);
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        // Check if response is JSON
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            console.error('Response is not JSON:', contentType);
            const text = await response.text();
            console.error('Response text:', text.substring(0, 200) + '...');
            throw new Error('Server returned non-JSON response');
        }
        
        const data = await response.json();
        console.log('Received data:', data);
        
        if (data.success) {
            eventData = data.event;
            ticketsData = data.tickets;
            statsData = data.stats;
            
            updateEventHeader();
            updateStats();
            renderTicketsTable();
        } else {
            showAlert('error', data.message || 'Error loading event data');
        }
    } catch (error) {
        console.error('Error loading event data:', error);
        showAlert('error', 'Error loading event data: ' + error.message);
        
        // Show a more user-friendly error in the table
        const tbody = document.getElementById('ticketsTableBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="11" class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-2x text-danger mb-2"></i>
                    <p class="text-danger">Error loading ticket data</p>
                    <button class="btn btn-primary btn-sm" onclick="loadEventData()">
                        <i class="fas fa-retry me-2"></i>Try Again
                    </button>
                </td>
            </tr>
        `;
    }
}
        // Update event header
        function updateEventHeader() {
            document.getElementById('eventTitle').textContent = 
                `${eventData.event_name} - ${formatDate(eventData.event_date)}`;
        }

        // Update statistics
        function updateStats() {
            document.getElementById('totalCapacity').textContent = eventData.capacity.toLocaleString();
            document.getElementById('confirmedTickets').textContent = (statsData.confirmed_tickets || 0).toLocaleString();
            document.getElementById('reservedTickets').textContent = (statsData.reserved_tickets || 0).toLocaleString();
            document.getElementById('cancelledTickets').textContent = (statsData.cancelled_tickets || 0).toLocaleString();
            document.getElementById('availableTickets').textContent = eventData.available_tickets.toLocaleString();
            document.getElementById('totalRevenue').textContent = formatCurrency(statsData.total_revenue || 0);
            document.getElementById('totalPurchases').textContent = (statsData.total_purchases || 0).toLocaleString();
            
            // Calculate average order value
            const avgOrderValue = statsData.total_purchases > 0 ? 
                (statsData.total_revenue || 0) / statsData.total_purchases : 0;
            document.getElementById('avgOrderValue').textContent = formatCurrency(avgOrderValue);
        }

        // Render tickets table
        function renderTicketsTable() {
            const tbody = document.getElementById('ticketsTableBody');
            
            if (ticketsData.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="11" class="text-center py-4">
                            <i class="fas fa-inbox fa-2x text-muted mb-2"></i>
                            <p class="text-muted">No ticket purchases found for this event.</p>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = ticketsData.map(ticket => `
                <tr data-status="${ticket.status}" class="${getRowClass(ticket)}">
                    <td><strong>${ticket.purchase_id}</strong></td>
                    <td>${ticket.first_name} ${ticket.surname}</td>
                    <td>${ticket.email}</td>
                    <td>${ticket.quantity}</td>
                    <td>${formatCurrency(ticket.unit_price)}</td>
                    <td>${formatCurrency(ticket.total_price)}</td>
                    <td>${formatCurrency(ticket.final_price)}</td>
                    <td>${getStatusBadge(ticket.status)}</td>
                    <td>${formatDateTime(ticket.purchase_date)}</td>
                    <td>${getExpiresCell(ticket)}</td>
                    <td>${getActionsCell(ticket)}</td>
                </tr>
            `).join('');

            // Start countdown timers
            updateCountdowns();
        }

        // Get row CSS class based on ticket status
        function getRowClass(ticket) {
            if (ticket.status === 'confirmed') return 'confirmed-ticket';
            if (ticket.status === 'reserved' && isExpired(ticket.reservation_expires_at)) {
                return 'expired-reservation';
            }
            return '';
        }

        // Get expires cell content
        function getExpiresCell(ticket) {
            if (ticket.status !== 'reserved' || !ticket.reservation_expires_at) {
                return '-';
            }
            
            if (isExpired(ticket.reservation_expires_at)) {
                return '<span class="text-danger"><i class="fas fa-exclamation-triangle me-1"></i>Expired</span>';
            }
            
            return `
                <span class="countdown-timer" data-expires="${ticket.reservation_expires_at}">
                    <i class="fas fa-clock"></i> 
                    <span class="timer-display">${getTimeRemaining(ticket.reservation_expires_at)}</span>
                </span>
            `;
        }

        // Get actions cell content
        function getActionsCell(ticket) {
            const viewBtn = `
                <button class="btn btn-outline-info btn-sm" onclick="viewTicketDetails(${ticket.purchase_id})" title="View Details">
                    <i class="fas fa-eye"></i>
                </button>
            `;
            
            if (ticket.status === 'cancelled') {
                return `
                    <div class="btn-group btn-group-sm">
                        ${viewBtn}
                        <span class="text-muted ms-2">Refunded</span>
                    </div>
                `;
            }
            
            const cancelBtn = `
                <button class="btn btn-outline-danger btn-sm" onclick="cancelTicket(${ticket.purchase_id})" title="${ticket.status === 'reserved' ? 'Cancel Reservation' : 'Cancel/Refund'}">
                    <i class="fas fa-ban"></i>
                </button>
            `;
            
            return `
                <div class="btn-group btn-group-sm">
                    ${viewBtn}
                    ${cancelBtn}
                </div>
            `;
        }

        // Filter tickets by status
        function filterTickets(status) {
            currentFilter = status;
            
            // Update button states
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('filter-active');
            });
            event.target.classList.add('filter-active');
            
            // Filter table rows
            const rows = document.querySelectorAll('#ticketsTable tbody tr');
            rows.forEach(row => {
                const rowStatus = row.getAttribute('data-status');
                if (status === 'all' || rowStatus === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // View ticket details
        async function viewTicketDetails(purchaseId) {
            currentTicketId = purchaseId;
            
            const ticket = ticketsData.find(t => t.purchase_id === purchaseId);
            if (!ticket) {
                showAlert('error', 'Ticket not found');
                return;
            }
            
            // Populate modal with ticket data
            document.getElementById('detailPurchaseId').textContent = ticket.purchase_id;
            document.getElementById('detailConfirmationCode').textContent = ticket.confirmation_code || 'N/A';
            document.getElementById('detailStatus').innerHTML = getStatusBadge(ticket.status);
            document.getElementById('detailQuantity').textContent = ticket.quantity;
            document.getElementById('detailUnitPrice').textContent = formatCurrency(ticket.unit_price);
            document.getElementById('detailTotalPrice').textContent = formatCurrency(ticket.total_price);
            document.getElementById('detailDiscountApplied').textContent = formatCurrency(ticket.discount_applied || 0);
            document.getElementById('detailFinalPrice').textContent = formatCurrency(ticket.final_price);
            document.getElementById('detailCustomerName').textContent = `${ticket.first_name} ${ticket.surname}`;
            document.getElementById('detailCustomerEmail').textContent = ticket.email;
            document.getElementById('detailUsername').textContent = ticket.username;
            document.getElementById('detailPhone').textContent = ticket.phone || 'N/A';
            document.getElementById('detailPurchaseDate').textContent = formatDateTime(ticket.purchase_date);
            document.getElementById('detailExpiresAt').textContent = ticket.reservation_expires_at ? 
                formatDateTime(ticket.reservation_expires_at) : 'N/A';
            document.getElementById('detailPaymentStatus').textContent = ticket.payment_status || 'N/A';
            document.getElementById('detailTransactionRef').textContent = ticket.transaction_reference || 'N/A';
            
            // Show notes if available
            if (ticket.notes) {
                document.getElementById('detailNotes').textContent = ticket.notes;
                document.getElementById('notesSection').style.display = 'block';
            } else {
                document.getElementById('notesSection').style.display = 'none';
            }
            
            // Hide cancel button if already cancelled
            const cancelBtn = document.getElementById('modalCancelBtn');
            if (ticket.status === 'cancelled') {
                cancelBtn.style.display = 'none';
            } else {
                cancelBtn.style.display = 'block';
            }
            
            // Show modal
            new bootstrap.Modal(document.getElementById('ticketDetailsModal')).show();
        }

        // Cancel ticket
        function cancelTicket(purchaseId) {
            currentTicketId = purchaseId;
            document.getElementById('cancelPurchaseId').value = purchaseId;
            new bootstrap.Modal(document.getElementById('cancelTicketModal')).show();
        }

        // Cancel ticket from details modal
        function cancelTicketFromModal() {
            if (currentTicketId) {
                cancelTicket(currentTicketId);
                bootstrap.Modal.getInstance(document.getElementById('ticketDetailsModal')).hide();
            }
        }

        // Handle cancel form submission
        document.getElementById('cancelTicketForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const purchaseId = formData.get('purchaseId');
            const reason = formData.get('reason');
            
            try {
                const response = await fetch(`/admin/events/${eventId}/tickets/${purchaseId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ reason })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('success', 'Ticket cancelled successfully');
                    await loadEventData(); // Refresh data
                } else {
                    showAlert('error', result.message || 'Error cancelling ticket');
                }
            } catch (error) {
                console.error('Error cancelling ticket:', error);
                showAlert('error', 'Error cancelling ticket');
            }
            
            // Hide modal
            bootstrap.Modal.getInstance(document.getElementById('cancelTicketModal')).hide();
        });

        // Refresh data
        async function refreshData() {
            const refreshBtn = event.target;
            const originalHtml = refreshBtn.innerHTML;
            refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Refreshing...';
            refreshBtn.disabled = true;
            
            await loadEventData();
            
            refreshBtn.innerHTML = originalHtml;
            refreshBtn.disabled = false;
            showAlert('success', 'Data refreshed successfully');
        }

        // Export tickets
        function exportTickets() {
            const csvContent = generateCSV();
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${eventData.event_name}_tickets_${new Date().toISOString().split('T')[0]}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        // Get status badge HTML
        function getStatusBadge(status) {
            const badges = {
                'confirmed': '<span class="badge bg-success"><i class="fas fa-check me-1"></i>Confirmed</span>',
                'reserved': '<span class="badge bg-warning"><i class="fas fa-clock me-1"></i>Reserved</span>',
                'cancelled': '<span class="badge bg-danger"><i class="fas fa-ban me-1"></i>Cancelled</span>'
            };
            return badges[status] || `<span class="badge bg-secondary">${status}</span>`;
        }

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(amount || 0);
        }

        // Format date
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            return new Date(dateString).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Format date and time
        function formatDateTime(dateString) {
            if (!dateString) return 'N/A';
            return new Date(dateString).toLocaleString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Check if reservation is expired
        function isExpired(expiresAt) {
            if (!expiresAt) return false;
            return new Date(expiresAt) < new Date();
        }

        // Get time remaining for countdown
        function getTimeRemaining(expiresAt) {
            if (!expiresAt) return '';
            
            const now = new Date().getTime();
            const expiry = new Date(expiresAt).getTime();
            const timeLeft = expiry - now;
            
            if (timeLeft <= 0) return 'Expired';
            
            const hours = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            
            if (hours > 0) {
                return `${hours}h ${minutes}m`;
            } else if (minutes > 0) {
                return `${minutes}m ${seconds}s`;
            } else {
                return `${seconds}s`;
            }
        }

        // Update countdown timers
        function updateCountdowns() {
            const timers = document.querySelectorAll('.countdown-timer');
            timers.forEach(timer => {
                const expiresAt = timer.getAttribute('data-expires');
                const display = timer.querySelector('.timer-display');
                if (display && expiresAt) {
                    const remaining = getTimeRemaining(expiresAt);
                    display.textContent = remaining;
                    
                    if (remaining === 'Expired') {
                        timer.innerHTML = '<span class="text-danger"><i class="fas fa-exclamation-triangle me-1"></i>Expired</span>';
                    }
                }
            });
        }

        // Start countdown timer updates
        setInterval(updateCountdowns, 1000);

        // Show alert message
        function showAlert(type, message) {
            const alertId = type === 'success' ? 'successAlert' : 'errorAlert';
            const messageId = type === 'success' ? 'successMessage' : 'errorMessage';
            
            const alertElement = document.getElementById(alertId);
            const messageElement = document.getElementById(messageId);
            
            messageElement.textContent = message;
            alertElement.classList.remove('d-none');
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                alertElement.classList.add('d-none');
            }, 5000);
        }

        // Check URL parameters for success/error messages
        function checkUrlParams() {
            const urlParams = new URLSearchParams(window.location.search);
            const success = urlParams.get('success');
            const error = urlParams.get('error');
            
            if (success) {
                showAlert('success', success);
            }
            if (error) {
                showAlert('error', error);
            }
        }

        // Complete the generateCSV function that was cut off in the original
        function generateCSV() {
            const headers = [
                'Purchase ID', 'Customer Name', 'Email', 'Username', 'Phone', 
                'Quantity', 'Unit Price', 'Total Price', 'Final Price', 'Discount Applied',
                'Status', 'Purchase Date', 'Expires At', 'Payment Status', 'Transaction Reference', 'Notes'
            ];
            
            const rows = ticketsData.map(ticket => [
                ticket.purchase_id,
                `${ticket.first_name} ${ticket.surname}`,
                ticket.email,
                ticket.username,
                ticket.phone || '',
                ticket.quantity,
                ticket.unit_price,
                ticket.total_price,
                ticket.final_price,
                ticket.discount_applied || 0,
                ticket.status,
                formatDateTime(ticket.purchase_date),
                ticket.reservation_expires_at ? formatDateTime(ticket.reservation_expires_at) : '',
                ticket.payment_status || '',
                ticket.transaction_reference || '',
                ticket.notes || ''
            ]);
            
            // Combine headers and rows
            const csvContent = [headers, ...rows]
                .map(row => row.map(field => `"${field}"`).join(','))
                .join('\n');
            
            return csvContent;
        }
         </script>
</body>
</html>